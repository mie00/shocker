#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail; shopt -s nullglob
btrfs_path='/var/shocker' && cgroups='cpu,cpuacct,memory' && repo='../.shocker-repo';
#shellcheck disable=SC2015
[[ $# -gt 0 ]] && while [ "${1:0:2}" == '--' ]; do OPTION=${1:2}; [[ $OPTION =~ = ]] && declare "SHOCKER_${OPTION/=*/}=${OPTION/*=/}" || declare "SHOCKER_${OPTION}=x"; shift; done

# check if btrfs is mounted and available
set +e
[ -d "$btrfs_path" ] || {
  printf '%s does not exist, creating:\n' "$btrfs_path" >&2
  mkdir -p "$btrfs_path"
}
sudo btrfs filesystem show "$btrfs_path" > /dev/null
[ "$?" -ne 0 ] && {
  printf 'Error: %s is not a btrfs filesystem\n' "$btrfs_path" >&2
  exit 1
}
set -e

# source utility functions
. ./utils.sh

# get network configuration
. ./settings.conf 2>/dev/null || true
NETWORK=${NETWORK:-10.0.0.0/24}
BRIDGE_DEV=${BRIDGE_DEV:-bridge0}

MASK=${NETWORK##*/}
NHOSTS=$((2**(32-MASK)))
NETWORK=$(addr_to_network "$NETWORK")
GATEWAY=$((NETWORK + 1))

gen_uuid() {
  find "$btrfs_path" -maxdepth 1 -type d -name 'ps_*' \
    | sed 's#^.*/ps_##' \
    | xargs printf "%010d\n" \
    | sort \
    | comm -1 -3 - <(seq -f "%010g" 2 "$1") \
    | head -1 \
    | sed 's/^0*//'
}

shocker_pre_run() {
  uuid=$(gen_uuid "$NHOSTS")
  cntid="ps_$uuid"
  [[ -z "$uuid" ]] && echo 'No more container id space for this subnet mask' >&2 && exit 1
  [[ "$(shocker_check "$1")" == 1 ]] && echo "No image named '$1' exists" >&2 && exit 1
  [[ "$(shocker_check "$cntid")" == 0 ]] && echo "UUID conflict, retrying..." >&2 && exit 1

  ip="$(int_to_ip $((NETWORK + uuid)))"
  mac="$(int_to_mac "$uuid")"
  gwip="$(int_to_ip "$GATEWAY")"

  ip netns add netns_"$cntid"
  ip link add dev veth0_"$cntid" type veth peer name veth1_"$cntid"
  ip link set dev veth0_"$cntid" up
  ip link set veth0_"$cntid" master "$BRIDGE_DEV"
  ip link set veth1_"$cntid" netns netns_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev lo up
  ip netns exec netns_"$cntid" ip link set veth1_"$cntid" address "$mac"
  ip netns exec netns_"$cntid" ip addr add "$ip/$MASK" dev veth1_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev veth1_"$cntid" up
  ip netns exec netns_"$cntid" ip route add default via "$gwip"

  btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$cntid" > /dev/null

  mount -o bind /dev/pts "$btrfs_path/$cntid/dev/pts"
  echo nameserver "$gwip" > "$btrfs_path/$cntid/etc/resolv.conf"
  echo "$ip" > "$btrfs_path/$cntid/host-ip-addr"
  echo "$@"  > "$btrfs_path/$cntid/${cntid}.cmd"
  cp init "$btrfs_path/$cntid/root/init" || true

  cgcreate -g "$cgroups:/$cntid"
  : "${SHOCKER_CPU_SHARE:=512}" && cgset -r cpu.shares="$SHOCKER_CPU_SHARE" "$cntid"
  : "${SHOCKER_MEM_LIMIT:=512}" && cgset -r memory.limit_in_bytes="$((SHOCKER_MEM_LIMIT * 1048576))" "$cntid"
  #: "${SHOCKER_KMEM_LIMIT:=32}" && cgset -r memory.kmem.limit_in_bytes="$((SHOCKER_KMEM_LIMIT * 1048576))" "$cntid"
  #: "${SHOCKER_MEMSW_LIMIT:=$SHOCKER_MEM_LIMIT}" && cgset -r memory.memsw.limit_in_bytes="$((SHOCKER_MEMSW_LIMIT * 1048576))" "$cntid"

  echo "$cntid"
}

shocker_post_run() {
  ip link del dev veth0_"$1"
  ip netns del netns_"$1"
  cgdelete -g "$cgroups:/$1" &> /dev/null || true
}

shocker_spawn() { #HELP Create a container:\nSHOCKER spawn <image_id> <env> <nix-image> <conf-file>
  cntid=$(shocker_pre_run "$@")

  service="$3"
  instance_tag="$btrfs_path/$cntid/var/tmp/instance-tag"

  tar xzf "$repo/${service}.tgz" -C "$btrfs_path/$cntid"
  pushd "$repo/api-config-files" >/dev/null || exit
  mkdir -p "$btrfs_path/$cntid/etc/service-config"
  git archive master | tar -x --strip-components=2 -C "$btrfs_path/$cntid/etc/service-config" "$service/$2"
  popd >/dev/null

  echo -e "$(date +%s.%N)\t$2\t$service\t$(cat "$btrfs_path/$cntid/host-ip-addr")" > "$instance_tag"
  shocker_execute "$cntid" "$service" -c "/etc/service-config/$4" || true
  rm -f "$instance_tag"

  shocker_post_run "$cntid"
}

shocker_run() { #HELP Create a container:\nSHOCKER run <image_id> <command>
  cntid=$(shocker_pre_run "$@")
  shocker_execute "$cntid" "${@:2}" || true
  shocker_post_run "$cntid"
}

shocker_stop() { #HELP Stop a running container:\nSHOCKER stop <container_id>
  [[ "$(shocker_check "$1")" == 1 ]] && echo "No container named '$1' exists" >&2 && exit 1

  state=$(get_state "$1")
  case $state in
    stopped) echo "Container '$1' is already stopped" >&2 ;;
    crashed) echo -e "Container '$1' is in a crashed state, please use the \x1b[1;33mcleanup\x1b[0m command" >&2 ;;
    missing) echo "Container '$1' does not exist" >&2 ;;
  esac

  sort -nr "/sys/fs/cgroup/cpuacct/$1/tasks" | while read -r proc; do
    kill -SIGTERM -- "$proc" 2>/dev/null || true;
  done
}

shocker_cleanup() { #HELP Cleanup unused cgroups, namespaces and veth devices:\nSHOCKER cleanup
  #shellcheck disable=SC2012
  ls -rtd "$btrfs_path"/ps_* | while read -r ps; do
    ps=$(basename "$ps")
    if [[ "$(get_state "$ps")" == "crashed" ]]; then
      ip link del "veth0_$ps" >/dev/null 2>&1 || true
      ip netns del "netns_$ps" >/dev/null 2>&1 || true
      cgdelete -g "$cgroups:/$ps" >/dev/null 2>&1 || true
      echo "Cleaned '$ps'"
    fi
  done
}

shocker_logs() { #HELP View logs from a container:\nSHOCKER logs <container_id>
  [[ "$(shocker_check "$1")" == 1 ]] && echo "No container named '$1' exists" >&2 && exit 1
  cat "$btrfs_path/$1/$1.log"
}

shocker_route() { #HELP Ensure outgoing route exists for containers:\nSHOCKER route <network-device>
  ip link add "$BRIDGE_DEV" type bridge || true
  ip addr add "$(int_to_ip "$GATEWAY")/$MASK" dev "$BRIDGE_DEV"
  ip link set "$BRIDGE_DEV" up

  iptables -t nat -A POSTROUTING -s "$(int_to_ip "$NETWORK")/$MASK" -o "$1" -j MASQUERADE
}

shocker_export() { #HELP Expose containers port through host:\nSHOCKER export <container_id> <port> <host_port>
  iptables -t nat -A PREROUTING -p tcp -m tcp --dport "$3" -j DNAT \
    --to-destination "$(cat "$btrfs_path/$1/host-ip-addr"):$2" \
    -m comment --comment "host:$3 -> $1:$2"
}

shocker_commit() { #HELP Commit a container to an image:\nSHOCKER commit <container_id> <image_id>
  [[ "$(shocker_check "$1")" == 1 ]] && echo "No container named '$1' exists" >&2 && exit 1
  [[ "$(shocker_check "$2")" == 1 ]] && echo "No image named '$2' exists" >&2 && exit 1
  shocker_rm "$2" && btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$2" > /dev/null
  echo "Created: $2"
}

shocker_name() { #HELP Give a symbolic name to a container:\nSHOCKER name <container_id> <name>
  [[ "$(shocker_check "$1")" == 1 ]] && echo "No container named '$1' exists" >&2 && exit 1
  ln -s "$btrfs_path/$1" "$btrfs_path/$2"
}

[ "$#" -ne 0 ] || { ./shocker-help; exit 1; }
case "$1" in
  -h|--help ) shift && ./shocker-help && exit 1 ;;
  commit    ) shift && shocker_commit "$@" ;;
  cleanup   ) shift && shocker_cleanup "$@" ;;
  exec      ) shift && ./shocker-exec "$@" ;;
  export    ) shift && shocker_export "$@" ;;
  images    ) shift && ./shocker-images "$@" ;;
  init      ) shift && ./shocker-init "$@" ;;
  kill      ) shift && ./shocker-kill "$@" ;;
  logs      ) shift && shocker_logs "$@" ;;
  name      ) shift && shocker_name "$@" ;;
  ps        ) shift && ./shocker-ps "$@" ;;
  pull      ) shift && ./shocker-pull "$@" ;;
  rm        ) shift && ./shocker-rm "$@" ;;
  route     ) shift && shocker_route "$@" ;;
  run       ) shift && shocker_run "$@" ;;
  spawn     ) shift && shocker_spawn "$@" ;;
  stop      ) shift && shocker_stop "$@" ;;
  *         ) shift && ./shocker-help && exit 1 ;;
esac
