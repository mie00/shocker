#!/bin/sh
dirname=$(dirname "$(readlink -f "$0")")

#shellcheck disable=SC1090
. "$dirname"/utils.sh

usage () {
cat << USAGE
  shocker-run - create and/or run a container

  Usage: shocker run <image|container> <command>

  Options:
   -h, --help output usage information

  Examples:
    $ shocker run img_1234 /bin/ash   # create a container and run ash shell
USAGE
}

[ "$#" -eq 0 ] && { usage; exit 1; }
case "$1" in
  -h|--help ) usage && exit 1 ;;
esac

shocker_create_network() {
  BRIDGE_DEV="$(get_bridge_dev)"
  OUTBOUND_DEV="$(get_outbound_dev)"
  GATEWAY="$(get_gateway)"
  NETWORK="$(get_network)"
  MASK="$(get_mask)"

  cntid=$1
  uuid="$(echo "$cntid" | sed 's/^c_//')"
  ip="$(int_to_ip "$(echo "$NETWORK $uuid + p" | dc)")"
  mac="$(int_to_mac "$uuid")"
  gwip="$(int_to_ip "$GATEWAY")"

  ip link show "$BRIDGE_DEV" >/dev/null 2>&1
  if [ "$?" -ne 0 ]; then
      ip link add "$BRIDGE_DEV" type bridge
      ip addr add "$(int_to_ip "$GATEWAY")/$MASK" dev "$BRIDGE_DEV"
      ip link set "$BRIDGE_DEV" up
  fi

  iptables -t nat -C POSTROUTING -s "$(int_to_ip "$NETWORK")/$MASK" \
      -o "$OUTBOUND_DEV" -j MASQUERADE >/dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    iptables -t nat -A POSTROUTING -s "$(int_to_ip "$NETWORK")/$MASK" \
        -o "$OUTBOUND_DEV" -j MASQUERADE >/dev/null 2>&1
  fi

  ip netns add netns_"$cntid"
  ip link add dev veth0_"$cntid" type veth peer name veth1_"$cntid"
  ip link set dev veth0_"$cntid" up
  ip link set veth0_"$cntid" master "$BRIDGE_DEV"
  ip link set veth1_"$cntid" netns netns_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev lo up
  ip netns exec netns_"$cntid" ip link set veth1_"$cntid" address "$mac"
  ip netns exec netns_"$cntid" ip addr add "$ip/$MASK" dev veth1_"$cntid"
  ip netns exec netns_"$cntid" ip link set dev veth1_"$cntid" up
  ip netns exec netns_"$cntid" ip route add default via "$gwip"

  echo "$gwip"
}

shocker_create_mounts() {
  # create bind mounts for devpts
  mount -o bind /dev/pts "${container_path}/$1/dev/pts"
}

shocker_create_cgroups() {
  cntid=$1
  # create and set cgroup limits
  cgcreate -g "$cgroups:/$cntid"
  cgset -r cpu.shares=512 "$cntid"
  cgset -r memory.limit_in_bytes=536870912 "$cntid"
}

shocker_pre_create() {
  NHOSTS="$(get_nhosts)"

  uuid=$(gen_uuid "$NHOSTS")
  cntid="c_$uuid"

  if [ "$#" -le 1 ]; then
    printf "Incorrect argument count\n" >&2
    exit 1
  fi

  if [ -z "$uuid" ]; then
    printf 'No more container id space for this subnet mask\n' >&2
    exit 1
  fi

  shocker_container_exists "$1"
  if [ "$?" -ne 0 ]; then
    shocker_image_exists "$1"
    if [ "$?" -ne 0 ]; then
      printf "No image or container named '%s' exists\n" "$1" >&2
      exit 1
    else
      base_path="${image_path}/$1"
    fi
  else
    base_path="${container_path}/$1"
  fi

  shocker_container_exists "$cntid"
  if [ "$?" -eq 0 ]; then
    printf "UUID conflict, '%s' already exists\n" "$cntid" >&2
    exit 1
  fi

  target_path="${container_path}/${cntid}"

  gwip=$(shocker_create_network "$cntid")
  btrfs subvolume snapshot "$base_path" "$target_path" > /dev/null
  shocker_create_mounts "$cntid"
  shocker_log_command "$cntid" "$@"

  # copy init scripts
  echo nameserver "$gwip" > "${target_path}/etc/resolv.conf"
  cp "${dirname}/init" "${target_path}/root/init"

  # create hierarchy id for container
  #shellcheck disable=SC2094
  echo "$(cat "${target_path}/.tree")" "$(date +%s)" "$cntid" "$@" \
      | md5sum | cut -f1 -d' ' >> "${target_path}/.tree"

  shocker_create_cgroups "$cntid"

  echo "$cntid"
}

shocker_execute() {
  cntid="$1"
  shift;
  cgexec -g "$cgroups:$cntid" \
    ip netns exec netns_"$cntid" \
    unshare -fmuip --mount-proc \
    chroot "${container_path}/${cntid}" \
    /bin/sh -c "source /root/init; $*"
}

shocker_stop() {
  findmnt -r | grep "^${container_path}/$1/" | cut -f1 -d' ' | xargs umount
  ip link del dev veth0_"$1"
  ip netns del netns_"$1"
  cgdelete -g "$cgroups:$1" >/dev/null 2>&1
}

shocker_start() {
  cntid=$1

  if [ "$#" -le 1 ]; then
    printf "Incorrect argument count\n" >&2
    exit 1
  fi

  shocker_image_exists "$1"
  if [ "$?" -ne 0 ]; then
    printf "No image named '%s' exists\n" "$1" >&2
    exit 1
  fi

  gwip=$(shocker_create_network "$cntid")
  shocker_create_mounts "$cntid"
  shocker_create_cgroups "$cntid"
  echo nameserver "$gwip" > "${container_path}/${cntid}/etc/resolv.conf"

  shocker_execute "$cntid" "${@:2}"

  shocker_stop "$cntid"
}

shocker_create() {
  cntid=$(shocker_pre_create "$@") || exit 1

  shocker_execute "$cntid" "${@:2}"

  shocker_stop "$cntid"
}

cstate=$(get_state "$1")
ctype=$(get_type "$1")

case "$ctype" in
  image    ) shocker_create "$@" ;;
  container)
    case "$cstate" in
      running) shocker_create "$@" ;;
      stopped) shocker_create "$@" ;;
      crashed) "$dirname"/shocker-cleanup;
               shocker_create "$@" ;;
      missing) printf "Container '%s' does not exist\n" "$1" >&2; exit 1 ;;
      *      ) usage; exit 1 ;;
    esac ;;
  unknown  ) printf "Can not determine type of '%s'\n" "$1" >&2; exit 1 ;;
  *        ) usage; exit 1 ;;
esac
